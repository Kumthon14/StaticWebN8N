// --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Element ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
const fileInput = document.getElementById('fileInput');
const uploadButton = document.getElementById('uploadButton');
const statusDiv = document.getElementById('status');
const downloadLink = document.getElementById('downloadLink');

// --- *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á Function App ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì *** ---
const functionAppUrl = "https://<YOUR_FUNCTION_APP_NAME>.azurewebsites.net"; 
// üëÜüëÜüëÜ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà <YOUR_FUNCTION_APP_NAME> ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Function App ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ---
let connection;
let connectionId;

// --- 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SignalR ---
async function initializeSignalR() {
    try {
        // ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ API ‡∏ó‡∏µ‡πà URL ‡πÄ‡∏ï‡πá‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        const negotiateResponse = await fetch(`${functionAppUrl}/api/negotiate`);
        const connectionInfo = await negotiateResponse.json();

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SignalR
        connection = new signalR.HubConnectionBuilder()
            .withUrl(connectionInfo.url)
            .build();
        
        // --- 4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£ "‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á" ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Server ---
        connection.on('summaryComplete', (data) => {
            console.log("Callback received from server:", data);
            statusDiv.innerText = '‚úÖ Summary complete! Your download is ready.';
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            downloadLink.href = data.url; 
            downloadLink.style.display = 'block'; 
            
            // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            uploadButton.disabled = false;
        });

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        await connection.start();
        connectionId = connection.connectionId;
        
        console.log("SignalR Connected with ID:", connectionId);
        statusDiv.innerText = "Ready to upload.";

    } catch (error) {
        console.error("SignalR connection failed: ", error);
        statusDiv.innerText = "Error: Could not connect to the real-time server.";
    }
}

// --- 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
uploadButton.addEventListener('click', async () => {
    const file = fileInput.files[0];

    if (!file) {
        alert("Please select a file first!");
        return;
    }
    if (!connectionId) {
        alert("Cannot connect to the server. Please refresh the page.");
        return;
    }

    const formData = new FormData();
    formData.append('file', file);
    formData.append('connectionId', connectionId);

    try {
        statusDiv.innerText = 'Uploading file...';
        uploadButton.disabled = true;
        downloadLink.style.display = 'none';

        // --- 3. ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞ Connection ID ‡πÑ‡∏õ‡∏ó‡∏µ‡πà API ‡∏ó‡∏µ‡πà URL ‡πÄ‡∏ï‡πá‡∏° ---
        const uploadResponse = await fetch(`${functionAppUrl}/api/upload`, {
            method: 'POST',
            body: formData
        });

        const result = await uploadResponse.json();

        if (uploadResponse.ok) {
            statusDiv.innerText = `‚è≥ ${result.message}`; 
        } else {
            throw new Error(result.message);
        }

    } catch (error) {
        console.error("Upload failed: ", error);
        statusDiv.innerText = `Upload Error: ${error.message}`;
        uploadButton.disabled = false; 
    }
});

// --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ---
initializeSignalR();